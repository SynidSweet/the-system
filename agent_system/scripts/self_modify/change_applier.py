#!/usr/bin/env python3
"""
Change Applier Component

Handles documentation generation, planning, and the coordination of changes
during the self-modification workflow.
"""

from datetime import datetime
from pathlib import Path
from typing import Optional


class ChangeApplier:
    """Applies and documents changes during self-modification workflow"""
    
    def __init__(self, project_root: Path):
        self.project_root = project_root
        
    async def document_improvement_plan(
        self, 
        task_description: str, 
        agent_name: str, 
        task_id: Optional[str], 
        development_branch: str, 
        original_branch: str
    ) -> Optional[Path]:
        """Document the improvement plan"""
        print("üìù Documenting improvement plan...")
        
        try:
            plan_file = self.project_root / f"docs/improvement_plan_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
            plan_file.parent.mkdir(exist_ok=True)
            
            plan_content = f"""# Self-Improvement Plan

## Task Description
{task_description}

## Implementation Details
- **Agent**: {agent_name}
- **Task ID**: {task_id or "N/A"}
- **Branch**: {development_branch}
- **Started**: {datetime.now().isoformat()}

## Problem Analysis
<!-- Agent should fill this in during implementation -->
- Current limitation: 
- Root causes:
- Impact assessment:

## Solution Design
<!-- Agent should fill this in during implementation -->
- Proposed approach:
- Components to modify:
- Risk assessment:

## Implementation Strategy
<!-- Agent should fill this in during implementation -->
- Step-by-step plan:
- Dependencies:
- Testing approach:

## Success Criteria
<!-- Agent should fill this in during implementation -->
- Functional requirements:
- Performance requirements:
- Quality requirements:

## Rollback Plan
- Original branch: {original_branch}
- Backup tag: backup-{datetime.now().strftime('%Y%m%d-%H%M%S')}
- Emergency procedures documented in self_improvement_guide.md

---
Generated by self-modification workflow on {datetime.now().isoformat()}
"""
            
            plan_file.write_text(plan_content)
            print(f"  ‚úÖ Improvement plan created: {plan_file}")
            
            return plan_file
            
        except Exception as e:
            print(f"  ‚ùå Failed to create improvement plan: {e}")
            return None
    
    async def update_documentation(self, task_description: str, agent_name: str, development_branch: str) -> bool:
        """Update relevant documentation"""
        print("üìù Updating documentation...")
        
        try:
            # Update CHANGELOG if it exists
            changelog_path = self.project_root / "CHANGELOG.md"
            if changelog_path.exists():
                await self._update_changelog(changelog_path, task_description, agent_name, development_branch)
            
            # Update README if needed (placeholder for future enhancements)
            readme_path = self.project_root / "README.md"
            if readme_path.exists():
                print("  ‚úÖ README.md reviewed (no changes needed)")
            
            # Update PROJECT_CONTEXT.md if major changes
            await self._update_project_context_if_needed(task_description)
            
            return True
            
        except Exception as e:
            print(f"  ‚ùå Documentation update failed: {e}")
            return False
    
    async def _update_changelog(self, changelog_path: Path, task_description: str, agent_name: str, development_branch: str) -> None:
        """Update the CHANGELOG.md file with new entry"""
        try:
            changelog_content = changelog_path.read_text()
            
            new_entry = f"""
## [{datetime.now().strftime('%Y-%m-%d')}] - Self-Improvement

### Added
- {task_description}

### Changed
- System enhanced through self-modification workflow
- Agent: {agent_name}
- Branch: {development_branch}

"""
            # Insert after the first line (usually # Changelog)
            lines = changelog_content.split('\n')
            lines.insert(1, new_entry)
            changelog_path.write_text('\n'.join(lines))
            
            print("  ‚úÖ CHANGELOG.md updated")
            
        except Exception as e:
            print(f"  ‚ö†Ô∏è  CHANGELOG.md update failed: {e}")
    
    async def _update_project_context_if_needed(self, task_description: str) -> None:
        """Update PROJECT_CONTEXT.md if this is a major architectural change"""
        try:
            # Check if this looks like a major change
            major_keywords = [
                "architecture", "refactor", "modular", "decompose", "split",
                "extract", "component", "system", "framework", "database",
                "api", "core", "process"
            ]
            
            is_major_change = any(keyword in task_description.lower() for keyword in major_keywords)
            
            if is_major_change:
                context_path = self.project_root / "PROJECT_CONTEXT.md"
                if context_path.exists():
                    content = context_path.read_text()
                    
                    # Add to recent updates section
                    today = datetime.now().strftime('%Y-%m-%d')
                    update_line = f"- **{today}**: {task_description}\n"
                    
                    # Find the recent updates section and add our entry
                    lines = content.split('\n')
                    for i, line in enumerate(lines):
                        if "## Recent Updates" in line:
                            # Insert after the header
                            lines.insert(i + 1, update_line)
                            break
                    
                    context_path.write_text('\n'.join(lines))
                    print("  ‚úÖ PROJECT_CONTEXT.md updated with major change")
                else:
                    print("  ‚ö†Ô∏è  PROJECT_CONTEXT.md not found")
            else:
                print("  ‚úÖ Minor change, PROJECT_CONTEXT.md unchanged")
                
        except Exception as e:
            print(f"  ‚ö†Ô∏è  PROJECT_CONTEXT.md update failed: {e}")
    
    async def send_user_notification(
        self, 
        message: str, 
        message_type: str = "info", 
        priority: str = "normal",
        task_id: Optional[str] = None,
        user_messenger=None
    ) -> bool:
        """Send notification to user through the system"""
        try:
            if user_messenger is None:
                print(f"  üì¢ Notification: {message}")
                return True
                
            if task_id:
                # TODO: This would need proper task context integration
                pass
            else:
                # Direct message without task context
                result = await user_messenger.execute(
                    message=message,
                    message_type=message_type,
                    priority=priority
                )
                if result.success:
                    print(f"  ‚úÖ User notification sent: {message_type}")
                    return True
                else:
                    print(f"  ‚ö†Ô∏è  Failed to send user message: {result.error_message}")
                    return False
                    
        except Exception as e:
            print(f"  ‚ö†Ô∏è  Failed to send user message: {e}")
            return False
    
    async def create_feature_documentation(self, task_description: str, development_branch: str) -> Optional[Path]:
        """Create feature-specific documentation for complex changes"""
        print("üìÑ Creating feature documentation...")
        
        try:
            # Check if this warrants feature documentation
            if len(task_description) < 50:
                print("  ‚úÖ Simple change, no feature documentation needed")
                return None
            
            # Create feature doc
            feature_slug = "".join(c if c.isalnum() else "-" for c in task_description[:50]).strip("-")
            feature_file = self.project_root / f"docs/features/{feature_slug}-{datetime.now().strftime('%Y%m%d')}.md"
            feature_file.parent.mkdir(exist_ok=True)
            
            feature_content = f"""# Feature: {task_description}

## Overview
This feature was implemented as part of the self-modification workflow.

- **Branch**: {development_branch}
- **Implemented**: {datetime.now().isoformat()}

## Problem Statement
<!-- Describe what problem this solves -->

## Solution Approach
<!-- Describe how this was implemented -->

## Components Modified
<!-- List files and components that were changed -->

## Testing Strategy
<!-- Describe how this was tested -->

## Usage Examples
<!-- Provide examples of how to use the new feature -->

## Future Enhancements
<!-- Note any follow-up work or improvements -->

---
Generated by self-modification workflow
"""
            
            feature_file.write_text(feature_content)
            print(f"  ‚úÖ Feature documentation created: {feature_file}")
            
            return feature_file
            
        except Exception as e:
            print(f"  ‚ùå Failed to create feature documentation: {e}")
            return None
    
    async def run_implementation_phase(
        self, 
        task_description: str, 
        agent_name: str, 
        development_branch: str,
        send_notification_func=None
    ) -> bool:
        """Execute the implementation phase notification"""
        print("\nüîß Phase 2: Implementation")
        print("The development environment is ready. Agent should now implement changes.")
        
        if send_notification_func:
            await send_notification_func(
                f"Self-modification workflow ready for task: {task_description}\n"
                f"Development branch: {development_branch}\n"
                f"Agent {agent_name} can now proceed with implementation.",
                "info"
            )
        
        return True
    
    async def coordinate_documentation_phase(
        self, 
        task_description: str, 
        agent_name: str, 
        development_branch: str
    ) -> bool:
        """Coordinate the documentation phase"""
        print("\nüìö Phase 4: Documentation and Maintenance")
        
        # Update system documentation
        if not await self.update_documentation(task_description, agent_name, development_branch):
            return False
        
        # Create feature documentation if needed
        await self.create_feature_documentation(task_description, development_branch)
        
        print("‚úÖ Phase 4 completed - Documentation updated")
        return True