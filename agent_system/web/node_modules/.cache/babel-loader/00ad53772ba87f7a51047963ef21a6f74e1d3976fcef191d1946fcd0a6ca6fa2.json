{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/system.petter.ai/agent_system/web/src/components/ThreadList.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThreadList = ({\n  threads,\n  selectedThread,\n  onSelectThread,\n  showCompleted\n}) => {\n  const filteredThreads = threads.filter(thread => showCompleted || thread.status !== 'completed');\n  const getThreadStatus = thread => {\n    if (thread.status === 'completed') return '✓';\n    if (thread.status === 'failed') return '✗';\n    if (thread.has_running_tasks) return '●';\n    return '○';\n  };\n  const getThreadStatusClass = thread => {\n    if (thread.status === 'completed') return 'status-completed';\n    if (thread.status === 'failed') return 'status-failed';\n    if (thread.has_running_tasks) return 'status-running';\n    return 'status-idle';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"thread-list\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"thread-list-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Task Threads\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"show-completed\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: showCompleted,\n          onChange: e => onSelectThread(selectedThread, e.target.checked)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this), \"Show completed\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"thread-list-items\",\n      children: filteredThreads.map(thread => {\n        var _thread$root_instruct;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `thread-item ${selectedThread === thread.tree_id ? 'selected' : ''}`,\n          onClick: () => onSelectThread(thread.tree_id, showCompleted),\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: `thread-status ${getThreadStatusClass(thread)}`,\n            children: getThreadStatus(thread)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"thread-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"thread-title\",\n              children: [(_thread$root_instruct = thread.root_instruction) === null || _thread$root_instruct === void 0 ? void 0 : _thread$root_instruct.substring(0, 50), \"...\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"thread-meta\",\n              children: [thread.task_count, \" tasks \\u2022 \", new Date(thread.created_at).toLocaleTimeString()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 13\n          }, this)]\n        }, thread.tree_id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_c = ThreadList;\nexport default ThreadList;\nvar _c;\n$RefreshReg$(_c, \"ThreadList\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","ThreadList","threads","selectedThread","onSelectThread","showCompleted","filteredThreads","filter","thread","status","getThreadStatus","has_running_tasks","getThreadStatusClass","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","checked","onChange","e","target","map","_thread$root_instruct","tree_id","onClick","root_instruction","substring","task_count","Date","created_at","toLocaleTimeString","_c","$RefreshReg$"],"sources":["/home/ubuntu/system.petter.ai/agent_system/web/src/components/ThreadList.js"],"sourcesContent":["import React from 'react';\n\nconst ThreadList = ({ threads, selectedThread, onSelectThread, showCompleted }) => {\n  const filteredThreads = threads.filter(thread => \n    showCompleted || thread.status !== 'completed'\n  );\n\n  const getThreadStatus = (thread) => {\n    if (thread.status === 'completed') return '✓';\n    if (thread.status === 'failed') return '✗';\n    if (thread.has_running_tasks) return '●';\n    return '○';\n  };\n\n  const getThreadStatusClass = (thread) => {\n    if (thread.status === 'completed') return 'status-completed';\n    if (thread.status === 'failed') return 'status-failed';\n    if (thread.has_running_tasks) return 'status-running';\n    return 'status-idle';\n  };\n\n  return (\n    <div className=\"thread-list\">\n      <div className=\"thread-list-header\">\n        <h3>Task Threads</h3>\n        <label className=\"show-completed\">\n          <input\n            type=\"checkbox\"\n            checked={showCompleted}\n            onChange={(e) => onSelectThread(selectedThread, e.target.checked)}\n          />\n          Show completed\n        </label>\n      </div>\n      <div className=\"thread-list-items\">\n        {filteredThreads.map(thread => (\n          <div\n            key={thread.tree_id}\n            className={`thread-item ${selectedThread === thread.tree_id ? 'selected' : ''}`}\n            onClick={() => onSelectThread(thread.tree_id, showCompleted)}\n          >\n            <span className={`thread-status ${getThreadStatusClass(thread)}`}>\n              {getThreadStatus(thread)}\n            </span>\n            <div className=\"thread-info\">\n              <div className=\"thread-title\">\n                {thread.root_instruction?.substring(0, 50)}...\n              </div>\n              <div className=\"thread-meta\">\n                {thread.task_count} tasks • {new Date(thread.created_at).toLocaleTimeString()}\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ThreadList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}