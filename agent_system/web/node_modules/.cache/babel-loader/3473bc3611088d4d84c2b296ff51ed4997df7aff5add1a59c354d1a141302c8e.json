{"ast":null,"code":"import _objectSpread from\"/code/personal/the-system/agent_system/web/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect,useCallback}from'react';import'./App.css';import ErrorBoundary from'./components/ErrorBoundary';import ThreadList from'./components/ThreadList';import MessageStream from'./components/MessageStream';import TaskTreeVisualization from'./components/TaskTreeVisualization';import ControlPanel from'./components/ControlPanel';import AgentBrowser from'./components/AgentBrowser';import ToolBrowser from'./components/ToolBrowser';import DocumentBrowser from'./components/DocumentBrowser';import InitializationPage from'./components/InitializationPage';import{useWebSocket}from'./hooks/useWebSocket';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";// Get API base URL from environment or use production default\nconst API_BASE_URL=process.env.REACT_APP_API_URL||(window.location.hostname==='localhost'?'http://localhost:8000':\"\".concat(window.location.protocol,\"//\").concat(window.location.hostname,\"/api\"));const WS_URL=process.env.REACT_APP_WS_URL||(window.location.hostname==='localhost'?'ws://localhost:8000/ws':\"\".concat(window.location.protocol==='https:'?'wss:':'ws:',\"//\").concat(window.location.hostname,\"/api/ws\"));const App=()=>{// System state\nconst[systemState,setSystemState]=useState('loading');const[currentView,setCurrentView]=useState('tasks');const[connectionStatus,setConnectionStatus]=useState('connecting');// Task and thread state\nconst[threads,setThreads]=useState([]);const[selectedThread,setSelectedThread]=useState(null);const[showCompleted,setShowCompleted]=useState(false);const[messages,setMessages]=useState([]);const[pausedTasks,setPausedTasks]=useState([]);// UI state\nconst[showTaskTree,setShowTaskTree]=useState(false);const[instruction,setInstruction]=useState('');const[isSubmitting,setIsSubmitting]=useState(false);// System configuration\nconst[systemConfig,setSystemConfig]=useState({max_parallel_tasks:3,step_mode:false,step_mode_threads:[],manual_step_mode:false,max_concurrent_agents:3});// WebSocket message handler\nconst handleWebSocketMessage=useCallback(message=>{switch(message.type){case'system_state_change':if(message.state){setSystemState(message.state);if(message.state==='ready'){fetchThreads();fetchSystemConfig();}}break;case'agent_started':case'agent_thinking':case'agent_tool_call':case'agent_tool_result':case'agent_completed':case'agent_error':case'step_mode_pause':setMessages(prev=>[...prev,message]);if(message.type==='step_mode_pause'){setPausedTasks(prev=>[...prev,message]);}break;case'task_created':case'task_completed':case'thread_update':fetchThreads();break;case'config_updated':if(message.config){setSystemConfig(message.config);}break;case'step_continued':if(message.task_id){setPausedTasks(prev=>prev.filter(t=>t.task_id!==message.task_id));}break;}},[]);// WebSocket hook\nconst{sendMessage}=useWebSocket({url:WS_URL,onMessage:handleWebSocketMessage,onConnectionStatusChange:setConnectionStatus});// Effects\nuseEffect(()=>{checkSystemState();fetchThreads();fetchSystemConfig();},[]);// API functions\nconst checkSystemState=async()=>{try{const response=await fetch(\"\".concat(API_BASE_URL,\"/system/state\"));const data=await response.json();setSystemState(data.state);}catch(error){console.error('Error checking system state:',error);setSystemState('uninitialized');}};const fetchThreads=async()=>{try{var _data$all_trees;const response=await fetch(\"\".concat(API_BASE_URL,\"/tasks/all\"));const data=await response.json();setThreads(data.all_trees||[]);// Auto-select first active thread if none selected\nif(!selectedThread&&((_data$all_trees=data.all_trees)===null||_data$all_trees===void 0?void 0:_data$all_trees.length)>0){const activeThread=data.all_trees.find(t=>t.has_running_tasks);if(activeThread){setSelectedThread(activeThread.tree_id);}}}catch(error){console.error('Error fetching threads:',error);}};const loadThreadMessages=async threadId=>{try{const response=await fetch(\"\".concat(API_BASE_URL,\"/tasks/tree/\").concat(threadId,\"/messages\"));const data=await response.json();setMessages(prev=>{const filtered=prev.filter(m=>m.tree_id!==threadId);return[...filtered,...data.messages];});}catch(error){console.error('Error loading thread messages:',error);}};const fetchSystemConfig=async()=>{try{const response=await fetch(\"\".concat(API_BASE_URL,\"/system/config\"));const config=await response.json();setSystemConfig(config);}catch(error){console.error('Error fetching config:',error);}};const updateSystemConfig=async newConfig=>{try{const response=await fetch(\"\".concat(API_BASE_URL,\"/system/config\"),{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify(newConfig)});if(response.ok){const result=await response.json();setSystemConfig(result.config);}}catch(error){console.error('Error updating config:',error);}};// Event handlers\nconst handleInitialize=async settings=>{try{await updateSystemConfig(_objectSpread(_objectSpread({},systemConfig),{},{manual_step_mode:settings.manualStepMode,max_concurrent_agents:settings.maxConcurrentAgents,step_mode:settings.manualStepMode,step_mode_threads:['*']}));const response=await fetch(\"\".concat(API_BASE_URL,\"/system/initialize\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(settings)});if(response.ok){setSystemState('initializing');}}catch(error){console.error('Error starting initialization:',error);}};const submitTask=async e=>{e.preventDefault();if(!instruction.trim()||isSubmitting)return;setIsSubmitting(true);try{const response=await fetch(\"\".concat(API_BASE_URL,\"/tasks\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({instruction})});if(response.ok){const result=await response.json();setInstruction('');setSelectedThread(result.tree_id);fetchThreads();}}catch(error){console.error('Error submitting task:',error);}finally{setIsSubmitting(false);}};const continueTask=taskId=>{sendMessage({type:'continue_step',task_id:taskId});};const handleSelectThread=(threadId,showComp)=>{setSelectedThread(threadId);if(showComp!==undefined){setShowCompleted(showComp);}if(threadId){loadThreadMessages(threadId);}};const handleKeyDown=e=>{if(e.key==='Enter'&&e.ctrlKey){submitTask(e);}};// Render different states\nif(systemState==='uninitialized'){return/*#__PURE__*/_jsx(ErrorBoundary,{children:/*#__PURE__*/_jsx(InitializationPage,{onInitialize:handleInitialize})});}if(systemState==='loading'){return/*#__PURE__*/_jsxs(\"div\",{className:\"loading-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"loading-spinner\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Checking system state...\"})]});}if(systemState==='initializing'){return/*#__PURE__*/_jsxs(\"div\",{className:\"app\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"app-header\",children:/*#__PURE__*/_jsx(\"h1\",{children:\"\\uD83E\\uDD16 Agent System - Initializing\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"app-body\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"initialization-progress\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"System Initialization in Progress\"}),/*#__PURE__*/_jsx(\"p\",{children:\"The system is executing initialization tasks. You can monitor progress below.\"}),/*#__PURE__*/_jsx(\"p\",{children:\"With manual step mode enabled, approve each agent execution in the Tasks view.\"}),/*#__PURE__*/_jsx(\"button\",{className:\"view-tasks-button\",onClick:()=>window.location.reload(),children:\"View Task Progress\"})]})})]});}return/*#__PURE__*/_jsx(ErrorBoundary,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"app\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"app-header\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"\\uD83E\\uDD16 Self-Improving Agent System\"}),/*#__PURE__*/_jsxs(\"nav\",{className:\"app-nav\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"nav-button \".concat(currentView==='tasks'?'active':''),onClick:()=>setCurrentView('tasks'),children:\"Tasks\"}),/*#__PURE__*/_jsx(\"button\",{className:\"nav-button \".concat(currentView==='agents'?'active':''),onClick:()=>setCurrentView('agents'),children:\"Agents\"}),/*#__PURE__*/_jsx(\"button\",{className:\"nav-button \".concat(currentView==='tools'?'active':''),onClick:()=>setCurrentView('tools'),children:\"Tools\"}),/*#__PURE__*/_jsx(\"button\",{className:\"nav-button \".concat(currentView==='documents'?'active':''),onClick:()=>setCurrentView('documents'),children:\"Documents\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"connection-status\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"status-indicator \".concat(connectionStatus)}),connectionStatus]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"app-body\",children:[currentView==='tasks'&&/*#__PURE__*/_jsxs(ErrorBoundary,{fallback:/*#__PURE__*/_jsx(\"div\",{children:\"Error loading tasks view\"}),children:[/*#__PURE__*/_jsx(\"div\",{className:\"sidebar\",children:/*#__PURE__*/_jsx(ThreadList,{threads:threads,selectedThread:selectedThread,onSelectThread:handleSelectThread,showCompleted:showCompleted})}),/*#__PURE__*/_jsxs(\"div\",{className:\"main-content\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"task-input-section\",children:[/*#__PURE__*/_jsxs(\"form\",{onSubmit:submitTask,className:\"task-form\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:instruction,onChange:e=>setInstruction(e.target.value),onKeyDown:handleKeyDown,placeholder:\"Enter a task instruction...\",className:\"task-input\",disabled:isSubmitting}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",disabled:!instruction.trim()||isSubmitting,className:\"submit-button\",children:isSubmitting?'Submitting...':'Submit Task'})]}),selectedThread&&/*#__PURE__*/_jsxs(\"div\",{className:\"view-toggle\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"toggle-button \".concat(!showTaskTree?'active':''),onClick:()=>setShowTaskTree(false),children:\"\\uD83D\\uDCDC Messages\"}),/*#__PURE__*/_jsx(\"button\",{className:\"toggle-button \".concat(showTaskTree?'active':''),onClick:()=>setShowTaskTree(true),children:\"\\uD83D\\uDCCA Tree View\"})]})]}),selectedThread?showTaskTree?/*#__PURE__*/_jsx(ErrorBoundary,{fallback:/*#__PURE__*/_jsx(\"div\",{children:\"Error loading task tree\"}),children:/*#__PURE__*/_jsx(TaskTreeVisualization,{threadId:selectedThread,apiBaseUrl:API_BASE_URL})}):/*#__PURE__*/_jsx(ErrorBoundary,{fallback:/*#__PURE__*/_jsx(\"div\",{children:\"Error loading messages\"}),children:/*#__PURE__*/_jsx(MessageStream,{messages:messages,threadId:selectedThread})}):/*#__PURE__*/_jsx(\"div\",{className:\"no-thread-selected\",children:\"Select a thread or submit a new task to get started\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"control-sidebar\",children:/*#__PURE__*/_jsx(ErrorBoundary,{fallback:/*#__PURE__*/_jsx(\"div\",{children:\"Error loading control panel\"}),children:/*#__PURE__*/_jsx(ControlPanel,{systemConfig:systemConfig,onUpdateConfig:updateSystemConfig,selectedThread:selectedThread,pausedTasks:pausedTasks.filter(t=>t.tree_id===selectedThread),onContinueTask:continueTask})})})]}),currentView==='agents'&&/*#__PURE__*/_jsx(ErrorBoundary,{fallback:/*#__PURE__*/_jsx(\"div\",{children:\"Error loading agents view\"}),children:/*#__PURE__*/_jsx(AgentBrowser,{apiBaseUrl:API_BASE_URL})}),currentView==='tools'&&/*#__PURE__*/_jsx(ErrorBoundary,{fallback:/*#__PURE__*/_jsx(\"div\",{children:\"Error loading tools view\"}),children:/*#__PURE__*/_jsx(ToolBrowser,{apiBaseUrl:API_BASE_URL})}),currentView==='documents'&&/*#__PURE__*/_jsx(ErrorBoundary,{fallback:/*#__PURE__*/_jsx(\"div\",{children:\"Error loading documents view\"}),children:/*#__PURE__*/_jsx(DocumentBrowser,{apiBaseUrl:API_BASE_URL})})]})]})});};export default App;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}