{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useRef, useEffect, useCallback } from 'react';\nexport const useWebSocket = ({\n  url,\n  onMessage,\n  onConnectionStatusChange,\n  reconnectInterval = 3000\n}) => {\n  _s();\n  var _wsRef$current;\n  const wsRef = useRef(null);\n  const reconnectTimeoutRef = useRef(null);\n  const connect = useCallback(() => {\n    // Prevent multiple connections\n    if (wsRef.current && (wsRef.current.readyState === WebSocket.CONNECTING || wsRef.current.readyState === WebSocket.OPEN)) {\n      return;\n    }\n    const ws = new WebSocket(url);\n    wsRef.current = ws;\n    ws.onopen = () => {\n      console.log('WebSocket connected');\n      onConnectionStatusChange('connected');\n\n      // Clear any pending reconnection attempts\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n        reconnectTimeoutRef.current = null;\n      }\n    };\n    ws.onmessage = event => {\n      try {\n        const message = JSON.parse(event.data);\n        onMessage(message);\n      } catch (e) {\n        console.error('Error parsing WebSocket message:', e);\n      }\n    };\n    ws.onclose = () => {\n      console.log('WebSocket disconnected, reconnecting...');\n      onConnectionStatusChange('disconnected');\n      wsRef.current = null;\n\n      // Attempt to reconnect after a delay\n      reconnectTimeoutRef.current = setTimeout(connect, reconnectInterval);\n    };\n    ws.onerror = error => {\n      console.error('WebSocket error:', error);\n      onConnectionStatusChange('error');\n    };\n  }, [url, onMessage, onConnectionStatusChange, reconnectInterval]);\n  const disconnect = useCallback(() => {\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n      reconnectTimeoutRef.current = null;\n    }\n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n      wsRef.current.close();\n      wsRef.current = null;\n    }\n  }, []);\n  const sendMessage = useCallback(message => {\n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify(message));\n      return true;\n    }\n    return false;\n  }, []);\n  useEffect(() => {\n    connect();\n    return () => {\n      disconnect();\n    };\n  }, [connect, disconnect]);\n  return {\n    sendMessage,\n    disconnect,\n    isConnected: ((_wsRef$current = wsRef.current) === null || _wsRef$current === void 0 ? void 0 : _wsRef$current.readyState) === WebSocket.OPEN\n  };\n};\n_s(useWebSocket, \"h5n0IbXIBAYjwnvzoxMnXT9mkeg=\");","map":{"version":3,"names":["useRef","useEffect","useCallback","useWebSocket","url","onMessage","onConnectionStatusChange","reconnectInterval","_s","_wsRef$current","wsRef","reconnectTimeoutRef","connect","current","readyState","WebSocket","CONNECTING","OPEN","ws","onopen","console","log","clearTimeout","onmessage","event","message","JSON","parse","data","e","error","onclose","setTimeout","onerror","disconnect","close","sendMessage","send","stringify","isConnected"],"sources":["/code/personal/the-system/agent_system/web/src/hooks/useWebSocket.ts"],"sourcesContent":["import { useRef, useEffect, useCallback } from 'react';\nimport { ConnectionStatus, WebSocketMessage } from '../types';\n\ninterface UseWebSocketOptions {\n  url: string;\n  onMessage: (message: WebSocketMessage) => void;\n  onConnectionStatusChange: (status: ConnectionStatus) => void;\n  reconnectInterval?: number;\n}\n\nexport const useWebSocket = ({\n  url,\n  onMessage,\n  onConnectionStatusChange,\n  reconnectInterval = 3000\n}: UseWebSocketOptions) => {\n  const wsRef = useRef<WebSocket | null>(null);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  const connect = useCallback(() => {\n    // Prevent multiple connections\n    if (wsRef.current && (\n      wsRef.current.readyState === WebSocket.CONNECTING || \n      wsRef.current.readyState === WebSocket.OPEN\n    )) {\n      return;\n    }\n    \n    const ws = new WebSocket(url);\n    wsRef.current = ws;\n    \n    ws.onopen = () => {\n      console.log('WebSocket connected');\n      onConnectionStatusChange('connected');\n      \n      // Clear any pending reconnection attempts\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n        reconnectTimeoutRef.current = null;\n      }\n    };\n    \n    ws.onmessage = (event) => {\n      try {\n        const message: WebSocketMessage = JSON.parse(event.data);\n        onMessage(message);\n      } catch (e) {\n        console.error('Error parsing WebSocket message:', e);\n      }\n    };\n    \n    ws.onclose = () => {\n      console.log('WebSocket disconnected, reconnecting...');\n      onConnectionStatusChange('disconnected');\n      wsRef.current = null;\n      \n      // Attempt to reconnect after a delay\n      reconnectTimeoutRef.current = setTimeout(connect, reconnectInterval);\n    };\n    \n    ws.onerror = (error) => {\n      console.error('WebSocket error:', error);\n      onConnectionStatusChange('error');\n    };\n  }, [url, onMessage, onConnectionStatusChange, reconnectInterval]);\n\n  const disconnect = useCallback(() => {\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n      reconnectTimeoutRef.current = null;\n    }\n    \n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n      wsRef.current.close();\n      wsRef.current = null;\n    }\n  }, []);\n\n  const sendMessage = useCallback((message: any) => {\n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify(message));\n      return true;\n    }\n    return false;\n  }, []);\n\n  useEffect(() => {\n    connect();\n    \n    return () => {\n      disconnect();\n    };\n  }, [connect, disconnect]);\n\n  return {\n    sendMessage,\n    disconnect,\n    isConnected: wsRef.current?.readyState === WebSocket.OPEN\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}