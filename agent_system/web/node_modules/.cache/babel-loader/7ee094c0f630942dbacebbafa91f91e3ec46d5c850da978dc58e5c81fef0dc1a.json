{"ast":null,"code":"var _jsxFileName = \"/code/personal/the-system/agent_system/web/src/components/ThreadList.tsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThreadList = ({\n  threads,\n  selectedThread,\n  onSelectThread,\n  showCompleted\n}) => {\n  const filteredThreads = threads.filter(thread => showCompleted || !thread.root_task || thread.root_task.status !== 'completed');\n  const getThreadStatus = thread => {\n    var _thread$root_task, _thread$root_task2;\n    if (((_thread$root_task = thread.root_task) === null || _thread$root_task === void 0 ? void 0 : _thread$root_task.status) === 'completed') return '✓';\n    if (((_thread$root_task2 = thread.root_task) === null || _thread$root_task2 === void 0 ? void 0 : _thread$root_task2.status) === 'failed') return '✗';\n    if (thread.has_running_tasks) return '●';\n    return '○';\n  };\n  const getThreadStatusClass = thread => {\n    var _thread$root_task3, _thread$root_task4;\n    if (((_thread$root_task3 = thread.root_task) === null || _thread$root_task3 === void 0 ? void 0 : _thread$root_task3.status) === 'completed') return 'status-completed';\n    if (((_thread$root_task4 = thread.root_task) === null || _thread$root_task4 === void 0 ? void 0 : _thread$root_task4.status) === 'failed') return 'status-failed';\n    if (thread.has_running_tasks) return 'status-running';\n    return 'status-idle';\n  };\n  const formatThreadTitle = thread => {\n    var _thread$root_task5;\n    const instruction = ((_thread$root_task5 = thread.root_task) === null || _thread$root_task5 === void 0 ? void 0 : _thread$root_task5.instruction) || 'Unknown task';\n    return instruction.length > 50 ? `${instruction.substring(0, 50)}...` : instruction;\n  };\n  const formatTimestamp = timestamp => {\n    try {\n      return new Date(timestamp).toLocaleTimeString();\n    } catch {\n      return 'Unknown time';\n    }\n  };\n  if (threads.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"thread-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"thread-list-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Task Threads\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"thread-list-empty\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No task threads yet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"empty-hint\",\n          children: \"Submit a task to get started\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"thread-list\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"thread-list-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Task Threads\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"show-completed\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: showCompleted,\n          onChange: e => onSelectThread(selectedThread, e.target.checked)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), \"Show completed\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"thread-list-items\",\n      children: filteredThreads.map(thread => {\n        var _thread$root_task6, _thread$root_task7;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `thread-item ${selectedThread === thread.tree_id ? 'selected' : ''}`,\n          onClick: () => onSelectThread(thread.tree_id, showCompleted),\n          role: \"button\",\n          tabIndex: 0,\n          onKeyDown: e => {\n            if (e.key === 'Enter' || e.key === ' ') {\n              onSelectThread(thread.tree_id, showCompleted);\n            }\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: `thread-status ${getThreadStatusClass(thread)}`,\n            children: getThreadStatus(thread)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"thread-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"thread-title\",\n              title: (_thread$root_task6 = thread.root_task) === null || _thread$root_task6 === void 0 ? void 0 : _thread$root_task6.instruction,\n              children: formatThreadTitle(thread)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"thread-meta\",\n              children: [thread.task_count, \" task\", thread.task_count !== 1 ? 's' : '', \" \\u2022 \", ' ', (_thread$root_task7 = thread.root_task) !== null && _thread$root_task7 !== void 0 && _thread$root_task7.created_at ? formatTimestamp(thread.root_task.created_at) : formatTimestamp(thread.last_activity)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this)]\n        }, thread.tree_id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), filteredThreads.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"thread-list-filtered-empty\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"No \", showCompleted ? '' : 'active ', \"threads to show\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this), !showCompleted && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"empty-hint\",\n        children: \"Check \\\"Show completed\\\" to see all threads\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_c = ThreadList;\nexport default ThreadList;\nvar _c;\n$RefreshReg$(_c, \"ThreadList\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","ThreadList","threads","selectedThread","onSelectThread","showCompleted","filteredThreads","filter","thread","root_task","status","getThreadStatus","_thread$root_task","_thread$root_task2","has_running_tasks","getThreadStatusClass","_thread$root_task3","_thread$root_task4","formatThreadTitle","_thread$root_task5","instruction","length","substring","formatTimestamp","timestamp","Date","toLocaleTimeString","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","checked","onChange","e","target","map","_thread$root_task6","_thread$root_task7","tree_id","onClick","role","tabIndex","onKeyDown","key","title","task_count","created_at","last_activity","_c","$RefreshReg$"],"sources":["/code/personal/the-system/agent_system/web/src/components/ThreadList.tsx"],"sourcesContent":["import React from 'react';\nimport { ThreadListProps, TaskThread } from '../types';\n\nconst ThreadList: React.FC<ThreadListProps> = ({ \n  threads, \n  selectedThread, \n  onSelectThread, \n  showCompleted \n}) => {\n  const filteredThreads = threads.filter(thread => \n    showCompleted || !thread.root_task || thread.root_task.status !== 'completed'\n  );\n\n  const getThreadStatus = (thread: TaskThread): string => {\n    if (thread.root_task?.status === 'completed') return '✓';\n    if (thread.root_task?.status === 'failed') return '✗';\n    if (thread.has_running_tasks) return '●';\n    return '○';\n  };\n\n  const getThreadStatusClass = (thread: TaskThread): string => {\n    if (thread.root_task?.status === 'completed') return 'status-completed';\n    if (thread.root_task?.status === 'failed') return 'status-failed';\n    if (thread.has_running_tasks) return 'status-running';\n    return 'status-idle';\n  };\n\n  const formatThreadTitle = (thread: TaskThread): string => {\n    const instruction = thread.root_task?.instruction || 'Unknown task';\n    return instruction.length > 50 ? `${instruction.substring(0, 50)}...` : instruction;\n  };\n\n  const formatTimestamp = (timestamp: string): string => {\n    try {\n      return new Date(timestamp).toLocaleTimeString();\n    } catch {\n      return 'Unknown time';\n    }\n  };\n\n  if (threads.length === 0) {\n    return (\n      <div className=\"thread-list\">\n        <div className=\"thread-list-header\">\n          <h3>Task Threads</h3>\n        </div>\n        <div className=\"thread-list-empty\">\n          <p>No task threads yet</p>\n          <p className=\"empty-hint\">Submit a task to get started</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"thread-list\">\n      <div className=\"thread-list-header\">\n        <h3>Task Threads</h3>\n        <label className=\"show-completed\">\n          <input\n            type=\"checkbox\"\n            checked={showCompleted}\n            onChange={(e) => onSelectThread(selectedThread, e.target.checked)}\n          />\n          Show completed\n        </label>\n      </div>\n      <div className=\"thread-list-items\">\n        {filteredThreads.map(thread => (\n          <div\n            key={thread.tree_id}\n            className={`thread-item ${selectedThread === thread.tree_id ? 'selected' : ''}`}\n            onClick={() => onSelectThread(thread.tree_id, showCompleted)}\n            role=\"button\"\n            tabIndex={0}\n            onKeyDown={(e) => {\n              if (e.key === 'Enter' || e.key === ' ') {\n                onSelectThread(thread.tree_id, showCompleted);\n              }\n            }}\n          >\n            <span className={`thread-status ${getThreadStatusClass(thread)}`}>\n              {getThreadStatus(thread)}\n            </span>\n            <div className=\"thread-info\">\n              <div className=\"thread-title\" title={thread.root_task?.instruction}>\n                {formatThreadTitle(thread)}\n              </div>\n              <div className=\"thread-meta\">\n                {thread.task_count} task{thread.task_count !== 1 ? 's' : ''} • {' '}\n                {thread.root_task?.created_at \n                  ? formatTimestamp(thread.root_task.created_at)\n                  : formatTimestamp(thread.last_activity)\n                }\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n      {filteredThreads.length === 0 && (\n        <div className=\"thread-list-filtered-empty\">\n          <p>No {showCompleted ? '' : 'active '}threads to show</p>\n          {!showCompleted && (\n            <p className=\"empty-hint\">Check \"Show completed\" to see all threads</p>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ThreadList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}