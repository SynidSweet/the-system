{"ast":null,"code":"import React,{useState,useEffect}from'react';// @ts-ignore - react-tree-graph types are not fully compatible\nimport Tree from'react-tree-graph';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const TaskTreeVisualization=_ref=>{let{threadId,apiBaseUrl}=_ref;const[treeData,setTreeData]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);useEffect(()=>{if(threadId){fetchTaskTree();}},[threadId]);const fetchTaskTree=async()=>{setLoading(true);setError(null);try{const response=await fetch(\"\".concat(apiBaseUrl,\"/tasks/tree/\").concat(threadId));if(!response.ok){throw new Error(\"Failed to fetch task tree: \".concat(response.statusText));}const data=await response.json();const formattedTree=formatTasksForTree(data.tasks||[]);setTreeData(formattedTree);}catch(err){setError(err instanceof Error?err.message:'Failed to load task tree');console.error('Error fetching task tree:',err);}finally{setLoading(false);}};const formatTasksForTree=tasks=>{if(!tasks.length)return null;// Build a map for quick lookup\nconst taskMap=new Map();tasks.forEach(task=>taskMap.set(task.task_id,task));// Find the root task (task with no parent)\nconst rootTask=tasks.find(task=>!task.parent_task_id);if(!rootTask)return null;// Recursively build the tree structure\nconst buildTree=task=>{const children=tasks.filter(t=>t.parent_task_id===task.task_id).map(buildTree);return{name:truncateText(task.instruction,50),children:children.length>0?children:undefined,attributes:{status:task.status,agent:task.agent_name||'System',task_id:task.task_id}};};return buildTree(rootTask);};const truncateText=(text,maxLength)=>{if(text.length<=maxLength)return text;return text.substring(0,maxLength)+'...';};const getNodeClassName=node=>{var _node$attributes,_node$attributes$stat;const status=((_node$attributes=node.attributes)===null||_node$attributes===void 0?void 0:(_node$attributes$stat=_node$attributes.status)===null||_node$attributes$stat===void 0?void 0:_node$attributes$stat.toLowerCase())||'unknown';return\"tree-node tree-node-\".concat(status);};const getStatusIcon=status=>{switch(status.toLowerCase()){case'completed':return'✅';case'failed':return'❌';case'running':return'🔄';case'pending':return'⏳';case'paused':return'⏸️';default:return'📋';}};if(loading){return/*#__PURE__*/_jsx(\"div\",{className:\"task-tree-container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"tree-loading\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"loading-spinner\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Loading task tree...\"})]})});}if(error){return/*#__PURE__*/_jsx(\"div\",{className:\"task-tree-container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"tree-error\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[\"\\u274C Error loading task tree: \",error]}),/*#__PURE__*/_jsx(\"button\",{onClick:fetchTaskTree,className:\"retry-button\",children:\"Retry\"})]})});}if(!treeData){return/*#__PURE__*/_jsx(\"div\",{className:\"task-tree-container\",children:/*#__PURE__*/_jsx(\"div\",{className:\"tree-empty\",children:/*#__PURE__*/_jsx(\"p\",{children:\"No task data available for this thread\"})})});}return/*#__PURE__*/_jsxs(\"div\",{className:\"task-tree-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"tree-header\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"\\uD83D\\uDCCA Task Tree Visualization\"}),/*#__PURE__*/_jsx(\"button\",{onClick:fetchTaskTree,className:\"refresh-button\",children:\"\\uD83D\\uDD04 Refresh\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"tree-legend\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"legend-item\",children:\"\\u2705 Completed \\xA0\"}),/*#__PURE__*/_jsx(\"span\",{className:\"legend-item\",children:\"\\uD83D\\uDD04 Running \\xA0\"}),/*#__PURE__*/_jsx(\"span\",{className:\"legend-item\",children:\"\\u23F3 Pending \\xA0\"}),/*#__PURE__*/_jsx(\"span\",{className:\"legend-item\",children:\"\\u274C Failed\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"tree-visualization\",children:/*#__PURE__*/_jsx(Tree,{data:treeData,height:400,width:800,svgProps:{className:'task-tree-svg'},nodeProps:{className:getNodeClassName,r:8},textProps:{x:12,y:4,className:'tree-node-text'},pathProps:{className:'tree-path'},gProps:{className:'tree-node-group'},renderCustomNodeElement:(rd3tProps,appState)=>{var _nodeDatum$attributes,_nodeDatum$attributes2,_nodeDatum$attributes3;const{nodeDatum}=rd3tProps;const status=((_nodeDatum$attributes=nodeDatum.attributes)===null||_nodeDatum$attributes===void 0?void 0:_nodeDatum$attributes.status)||'unknown';const agent=((_nodeDatum$attributes2=nodeDatum.attributes)===null||_nodeDatum$attributes2===void 0?void 0:_nodeDatum$attributes2.agent)||'System';const taskId=(_nodeDatum$attributes3=nodeDatum.attributes)===null||_nodeDatum$attributes3===void 0?void 0:_nodeDatum$attributes3.task_id;return/*#__PURE__*/_jsxs(\"g\",{className:getNodeClassName(nodeDatum),children:[/*#__PURE__*/_jsx(\"circle\",{r:\"8\",fill:getStatusColor(status)}),/*#__PURE__*/_jsxs(\"text\",{x:\"12\",y:\"4\",className:\"node-instruction\",children:[getStatusIcon(status),\" \",nodeDatum.name]}),/*#__PURE__*/_jsxs(\"text\",{x:\"12\",y:\"18\",className:\"node-agent\",fontSize:\"10\",children:[agent,\" (#\",taskId,\")\"]})]});}})})]});};const getStatusColor=status=>{switch(status.toLowerCase()){case'completed':return'#4CAF50';case'failed':return'#F44336';case'running':return'#2196F3';case'pending':return'#FF9800';case'paused':return'#9C27B0';default:return'#757575';}};export default TaskTreeVisualization;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}