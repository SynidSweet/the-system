{"ast":null,"code":"import{useRef,useEffect,useCallback}from'react';export const useWebSocket=_ref=>{var _wsRef$current;let{url,onMessage,onConnectionStatusChange,reconnectInterval=3000}=_ref;const wsRef=useRef(null);const reconnectTimeoutRef=useRef(null);const connect=useCallback(()=>{// Prevent multiple connections\nif(wsRef.current&&(wsRef.current.readyState===WebSocket.CONNECTING||wsRef.current.readyState===WebSocket.OPEN)){return;}const ws=new WebSocket(url);wsRef.current=ws;ws.onopen=()=>{console.log('WebSocket connected');onConnectionStatusChange('connected');// Clear any pending reconnection attempts\nif(reconnectTimeoutRef.current){clearTimeout(reconnectTimeoutRef.current);reconnectTimeoutRef.current=null;}};ws.onmessage=event=>{try{const message=JSON.parse(event.data);onMessage(message);}catch(e){console.error('Error parsing WebSocket message:',e);}};ws.onclose=()=>{console.log('WebSocket disconnected, reconnecting...');onConnectionStatusChange('disconnected');wsRef.current=null;// Attempt to reconnect after a delay\nreconnectTimeoutRef.current=setTimeout(connect,reconnectInterval);};ws.onerror=error=>{console.error('WebSocket error:',error);onConnectionStatusChange('error');};},[url,onMessage,onConnectionStatusChange,reconnectInterval]);const disconnect=useCallback(()=>{if(reconnectTimeoutRef.current){clearTimeout(reconnectTimeoutRef.current);reconnectTimeoutRef.current=null;}if(wsRef.current&&wsRef.current.readyState===WebSocket.OPEN){wsRef.current.close();wsRef.current=null;}},[]);const sendMessage=useCallback(message=>{if(wsRef.current&&wsRef.current.readyState===WebSocket.OPEN){wsRef.current.send(JSON.stringify(message));return true;}return false;},[]);useEffect(()=>{connect();return()=>{disconnect();};},[connect,disconnect]);return{sendMessage,disconnect,isConnected:((_wsRef$current=wsRef.current)===null||_wsRef$current===void 0?void 0:_wsRef$current.readyState)===WebSocket.OPEN};};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}