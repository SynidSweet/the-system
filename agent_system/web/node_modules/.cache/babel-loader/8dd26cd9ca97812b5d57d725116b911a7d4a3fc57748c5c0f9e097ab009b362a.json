{"ast":null,"code":"import _extends from '@babel/runtime/helpers/extends';\nimport React, { useState, useEffect } from 'react';\nimport Container from './container.js';\nfunction Animated(props) {\n  const initialX = props.nodes[0].x;\n  const initialY = props.nodes[0].y;\n  const [state, setState] = useState({\n    nodes: props.nodes.map(n => ({\n      ...n,\n      x: initialX,\n      y: initialY\n    })),\n    links: props.links.map(l => ({\n      source: {\n        ...l.source,\n        x: initialX,\n        y: initialY\n      },\n      target: {\n        ...l.target,\n        x: initialX,\n        y: initialY\n      }\n    }))\n  });\n  const [animation, setAnimation] = useState(null);\n  useEffect(animate, [props.nodes, props.links]);\n  function animate() {\n    // Stop previous animation if one is already in progress.  We will start the next animation\n    // from the position we are currently in\n    clearInterval(animation);\n    let counter = 0;\n\n    // Do as much one-time calculation outside of the animation step, which needs to be fast\n    const animationContext = getAnimationContext(state, props);\n    const interval = setInterval(() => {\n      counter++;\n      if (counter === props.steps) {\n        clearInterval(interval);\n        setState({\n          nodes: props.nodes,\n          links: props.links\n        });\n        return;\n      }\n      setState(calculateNewState(animationContext, counter / props.steps));\n    }, props.duration / props.steps);\n    setAnimation(interval);\n    return () => clearInterval(animation);\n  }\n  function getAnimationContext(initialState, newState) {\n    // Nodes/links that are in both states need to be moved from the old position to the new one\n    // Nodes/links only in the initial state are being removed, and should be moved to the position\n    // of the closest ancestor that still exists, or the new root\n    // Nodes/links only in the new state are being added, and should be moved from the position of\n    // the closest ancestor that previously existed, or the old root\n\n    // The base determines which node/link the data (like classes and labels) comes from for rendering\n\n    // We only run this once at the start of the animation, so optimisation is less important\n    const addedNodes = newState.nodes.filter(n1 => initialState.nodes.every(n2 => !areNodesSame(n1, n2))).map(n1 => ({\n      base: n1,\n      old: getClosestAncestor(n1, newState, initialState),\n      new: n1\n    }));\n    const changedNodes = newState.nodes.filter(n1 => initialState.nodes.some(n2 => areNodesSame(n1, n2))).map(n1 => ({\n      base: n1,\n      old: initialState.nodes.find(n2 => areNodesSame(n1, n2)),\n      new: n1\n    }));\n    const removedNodes = initialState.nodes.filter(n1 => newState.nodes.every(n2 => !areNodesSame(n1, n2))).map(n1 => ({\n      base: n1,\n      old: n1,\n      new: getClosestAncestor(n1, initialState, newState)\n    }));\n    const addedLinks = newState.links.filter(l1 => initialState.links.every(l2 => !areLinksSame(l1, l2))).map(l1 => ({\n      base: l1,\n      old: getClosestAncestor(l1.target, newState, initialState),\n      new: l1\n    }));\n    const changedLinks = newState.links.filter(l1 => initialState.links.some(l2 => areLinksSame(l1, l2))).map(l1 => ({\n      base: l1,\n      old: initialState.links.find(l2 => areLinksSame(l1, l2)),\n      new: l1\n    }));\n    const removedLinks = initialState.links.filter(l1 => newState.links.every(l2 => !areLinksSame(l1, l2))).map(l1 => ({\n      base: l1,\n      old: l1,\n      new: getClosestAncestor(l1.target, initialState, newState)\n    }));\n    return {\n      nodes: changedNodes.concat(addedNodes).concat(removedNodes),\n      links: changedLinks.concat(addedLinks).concat(removedLinks)\n    };\n  }\n  function getClosestAncestor(node, stateWithNode, stateWithoutNode) {\n    let oldParent = node;\n    while (oldParent) {\n      let newParent = stateWithoutNode.nodes.find(n => areNodesSame(oldParent, n));\n      if (newParent) {\n        return newParent;\n      }\n      oldParent = stateWithNode.nodes.find(n => (props.getChildren(n) || []).some(c => areNodesSame(oldParent, c)));\n    }\n    return stateWithoutNode.nodes[0];\n  }\n  function areNodesSame(a, b) {\n    return a.data[props.keyProp] === b.data[props.keyProp];\n  }\n  function areLinksSame(a, b) {\n    return a.source.data[props.keyProp] === b.source.data[props.keyProp] && a.target.data[props.keyProp] === b.target.data[props.keyProp];\n  }\n  function calculateNewState(animationContext, interval) {\n    return {\n      nodes: animationContext.nodes.map(n => calculateNodePosition(n.base, n.old, n.new, interval)),\n      links: animationContext.links.map(l => calculateLinkPosition(l.base, l.old, l.new, interval))\n    };\n  }\n  function calculateLinkPosition(link, start, end, interval) {\n    return {\n      source: {\n        ...link.source,\n        x: calculateNewValue(start.source ? start.source.x : start.x, end.source ? end.source.x : end.x, interval),\n        y: calculateNewValue(start.source ? start.source.y : start.y, end.source ? end.source.y : end.y, interval)\n      },\n      target: {\n        ...link.target,\n        x: calculateNewValue(start.target ? start.target.x : start.x, end.target ? end.target.x : end.x, interval),\n        y: calculateNewValue(start.target ? start.target.y : start.y, end.target ? end.target.y : end.y, interval)\n      }\n    };\n  }\n  function calculateNodePosition(node, start, end, interval) {\n    return {\n      ...node,\n      x: calculateNewValue(start.x, end.x, interval),\n      y: calculateNewValue(start.y, end.y, interval)\n    };\n  }\n  function calculateNewValue(start, end, interval) {\n    return start + (end - start) * props.easing(interval);\n  }\n  return /*#__PURE__*/React.createElement(Container, _extends({}, props, state));\n}\nexport { Animated as default };","map":{"version":3,"names":["_extends","React","useState","useEffect","Container","Animated","props","initialX","nodes","x","initialY","y","state","setState","map","n","links","l","source","target","animation","setAnimation","animate","clearInterval","counter","animationContext","getAnimationContext","interval","setInterval","steps","calculateNewState","duration","initialState","newState","addedNodes","filter","n1","every","n2","areNodesSame","base","old","getClosestAncestor","new","changedNodes","some","find","removedNodes","addedLinks","l1","l2","areLinksSame","changedLinks","removedLinks","concat","node","stateWithNode","stateWithoutNode","oldParent","newParent","getChildren","c","a","b","data","keyProp","calculateNodePosition","calculateLinkPosition","link","start","end","calculateNewValue","easing","createElement","default"],"sources":["/code/personal/the-system/agent_system/web/node_modules/react-tree-graph/dist/module/components/animated.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/extends';\r\nimport React, { useState, useEffect } from 'react';\r\nimport Container from './container.js';\r\n\r\nfunction Animated(props) {\r\n  const initialX = props.nodes[0].x;\r\n  const initialY = props.nodes[0].y;\r\n  const [state, setState] = useState({\r\n    nodes: props.nodes.map(n => ({\r\n      ...n,\r\n      x: initialX,\r\n      y: initialY\r\n    })),\r\n    links: props.links.map(l => ({\r\n      source: {\r\n        ...l.source,\r\n        x: initialX,\r\n        y: initialY\r\n      },\r\n      target: {\r\n        ...l.target,\r\n        x: initialX,\r\n        y: initialY\r\n      }\r\n    }))\r\n  });\r\n  const [animation, setAnimation] = useState(null);\r\n  useEffect(animate, [props.nodes, props.links]);\r\n  function animate() {\r\n    // Stop previous animation if one is already in progress.  We will start the next animation\r\n    // from the position we are currently in\r\n    clearInterval(animation);\r\n    let counter = 0;\r\n\r\n    // Do as much one-time calculation outside of the animation step, which needs to be fast\r\n    const animationContext = getAnimationContext(state, props);\r\n    const interval = setInterval(() => {\r\n      counter++;\r\n      if (counter === props.steps) {\r\n        clearInterval(interval);\r\n        setState({\r\n          nodes: props.nodes,\r\n          links: props.links\r\n        });\r\n        return;\r\n      }\r\n      setState(calculateNewState(animationContext, counter / props.steps));\r\n    }, props.duration / props.steps);\r\n    setAnimation(interval);\r\n    return () => clearInterval(animation);\r\n  }\r\n  function getAnimationContext(initialState, newState) {\r\n    // Nodes/links that are in both states need to be moved from the old position to the new one\r\n    // Nodes/links only in the initial state are being removed, and should be moved to the position\r\n    // of the closest ancestor that still exists, or the new root\r\n    // Nodes/links only in the new state are being added, and should be moved from the position of\r\n    // the closest ancestor that previously existed, or the old root\r\n\r\n    // The base determines which node/link the data (like classes and labels) comes from for rendering\r\n\r\n    // We only run this once at the start of the animation, so optimisation is less important\r\n    const addedNodes = newState.nodes.filter(n1 => initialState.nodes.every(n2 => !areNodesSame(n1, n2))).map(n1 => ({\r\n      base: n1,\r\n      old: getClosestAncestor(n1, newState, initialState),\r\n      new: n1\r\n    }));\r\n    const changedNodes = newState.nodes.filter(n1 => initialState.nodes.some(n2 => areNodesSame(n1, n2))).map(n1 => ({\r\n      base: n1,\r\n      old: initialState.nodes.find(n2 => areNodesSame(n1, n2)),\r\n      new: n1\r\n    }));\r\n    const removedNodes = initialState.nodes.filter(n1 => newState.nodes.every(n2 => !areNodesSame(n1, n2))).map(n1 => ({\r\n      base: n1,\r\n      old: n1,\r\n      new: getClosestAncestor(n1, initialState, newState)\r\n    }));\r\n    const addedLinks = newState.links.filter(l1 => initialState.links.every(l2 => !areLinksSame(l1, l2))).map(l1 => ({\r\n      base: l1,\r\n      old: getClosestAncestor(l1.target, newState, initialState),\r\n      new: l1\r\n    }));\r\n    const changedLinks = newState.links.filter(l1 => initialState.links.some(l2 => areLinksSame(l1, l2))).map(l1 => ({\r\n      base: l1,\r\n      old: initialState.links.find(l2 => areLinksSame(l1, l2)),\r\n      new: l1\r\n    }));\r\n    const removedLinks = initialState.links.filter(l1 => newState.links.every(l2 => !areLinksSame(l1, l2))).map(l1 => ({\r\n      base: l1,\r\n      old: l1,\r\n      new: getClosestAncestor(l1.target, initialState, newState)\r\n    }));\r\n    return {\r\n      nodes: changedNodes.concat(addedNodes).concat(removedNodes),\r\n      links: changedLinks.concat(addedLinks).concat(removedLinks)\r\n    };\r\n  }\r\n  function getClosestAncestor(node, stateWithNode, stateWithoutNode) {\r\n    let oldParent = node;\r\n    while (oldParent) {\r\n      let newParent = stateWithoutNode.nodes.find(n => areNodesSame(oldParent, n));\r\n      if (newParent) {\r\n        return newParent;\r\n      }\r\n      oldParent = stateWithNode.nodes.find(n => (props.getChildren(n) || []).some(c => areNodesSame(oldParent, c)));\r\n    }\r\n    return stateWithoutNode.nodes[0];\r\n  }\r\n  function areNodesSame(a, b) {\r\n    return a.data[props.keyProp] === b.data[props.keyProp];\r\n  }\r\n  function areLinksSame(a, b) {\r\n    return a.source.data[props.keyProp] === b.source.data[props.keyProp] && a.target.data[props.keyProp] === b.target.data[props.keyProp];\r\n  }\r\n  function calculateNewState(animationContext, interval) {\r\n    return {\r\n      nodes: animationContext.nodes.map(n => calculateNodePosition(n.base, n.old, n.new, interval)),\r\n      links: animationContext.links.map(l => calculateLinkPosition(l.base, l.old, l.new, interval))\r\n    };\r\n  }\r\n  function calculateLinkPosition(link, start, end, interval) {\r\n    return {\r\n      source: {\r\n        ...link.source,\r\n        x: calculateNewValue(start.source ? start.source.x : start.x, end.source ? end.source.x : end.x, interval),\r\n        y: calculateNewValue(start.source ? start.source.y : start.y, end.source ? end.source.y : end.y, interval)\r\n      },\r\n      target: {\r\n        ...link.target,\r\n        x: calculateNewValue(start.target ? start.target.x : start.x, end.target ? end.target.x : end.x, interval),\r\n        y: calculateNewValue(start.target ? start.target.y : start.y, end.target ? end.target.y : end.y, interval)\r\n      }\r\n    };\r\n  }\r\n  function calculateNodePosition(node, start, end, interval) {\r\n    return {\r\n      ...node,\r\n      x: calculateNewValue(start.x, end.x, interval),\r\n      y: calculateNewValue(start.y, end.y, interval)\r\n    };\r\n  }\r\n  function calculateNewValue(start, end, interval) {\r\n    return start + (end - start) * props.easing(interval);\r\n  }\r\n  return /*#__PURE__*/React.createElement(Container, _extends({}, props, state));\r\n}\r\n\r\nexport { Animated as default };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}