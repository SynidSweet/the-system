{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/system.petter.ai/agent_system/web/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport ThreadList from './components/ThreadList';\nimport MessageStream from './components/MessageStream';\nimport ControlPanel from './components/ControlPanel';\nimport AgentBrowser from './components/AgentBrowser';\nimport ToolBrowser from './components/ToolBrowser';\nimport DocumentBrowser from './components/DocumentBrowser';\n\n// Get API base URL from environment or use production default\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.REACT_APP_API_URL || (window.location.hostname === 'localhost' ? 'http://localhost:8000' : `${window.location.protocol}//${window.location.hostname}/api`);\nconst WS_URL = process.env.REACT_APP_WS_URL || (window.location.hostname === 'localhost' ? 'ws://localhost:8000/ws' : `${window.location.protocol === 'https:' ? 'wss:' : 'ws:'}//${window.location.hostname}/api/ws`);\nfunction App() {\n  _s();\n  const [currentView, setCurrentView] = useState('tasks'); // 'tasks', 'agents', 'tools', 'documents'\n  const [threads, setThreads] = useState([]);\n  const [selectedThread, setSelectedThread] = useState(null);\n  const [showCompleted, setShowCompleted] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [pausedTasks, setPausedTasks] = useState([]);\n  const [systemConfig, setSystemConfig] = useState({\n    max_parallel_tasks: 3,\n    step_mode: false,\n    step_mode_threads: []\n  });\n  const [instruction, setInstruction] = useState('');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState('connecting');\n  const wsRef = useRef(null);\n  useEffect(() => {\n    // Connect to WebSocket for real-time updates\n    if (!wsRef.current || wsRef.current.readyState === WebSocket.CLOSED) {\n      connectWebSocket();\n    }\n\n    // Initial data fetch\n    fetchThreads();\n    fetchSystemConfig();\n    return () => {\n      if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n        wsRef.current.close();\n        wsRef.current = null;\n      }\n    };\n  }, []);\n  const connectWebSocket = () => {\n    // Prevent multiple connections\n    if (wsRef.current && (wsRef.current.readyState === WebSocket.CONNECTING || wsRef.current.readyState === WebSocket.OPEN)) {\n      return;\n    }\n    const ws = new WebSocket(WS_URL);\n    wsRef.current = ws;\n    ws.onopen = () => {\n      console.log('WebSocket connected');\n      setConnectionStatus('connected');\n    };\n    ws.onmessage = event => {\n      try {\n        const message = JSON.parse(event.data);\n        handleWebSocketMessage(message);\n      } catch (e) {\n        console.error('Error parsing WebSocket message:', e);\n      }\n    };\n    ws.onclose = () => {\n      console.log('WebSocket disconnected, reconnecting...');\n      setConnectionStatus('disconnected');\n      wsRef.current = null;\n      setTimeout(connectWebSocket, 3000);\n    };\n    ws.onerror = error => {\n      console.error('WebSocket error:', error);\n      setConnectionStatus('error');\n    };\n  };\n  const handleWebSocketMessage = message => {\n    switch (message.type) {\n      case 'agent_started':\n      case 'agent_thinking':\n      case 'agent_tool_call':\n      case 'agent_tool_result':\n      case 'agent_completed':\n      case 'agent_error':\n      case 'step_mode_pause':\n        setMessages(prev => [...prev, message]);\n        if (message.type === 'step_mode_pause') {\n          setPausedTasks(prev => [...prev, message]);\n        }\n        break;\n      case 'task_created':\n      case 'task_completed':\n      case 'thread_update':\n        fetchThreads();\n        break;\n      case 'config_updated':\n        setSystemConfig(message.config);\n        break;\n      case 'step_continued':\n        setPausedTasks(prev => prev.filter(t => t.task_id !== message.task_id));\n        break;\n    }\n  };\n  const fetchThreads = async () => {\n    try {\n      var _data$all_trees;\n      const response = await fetch(`${API_BASE_URL}/tasks/all`);\n      const data = await response.json();\n      setThreads(data.all_trees || []);\n\n      // Auto-select first active thread if none selected\n      if (!selectedThread && ((_data$all_trees = data.all_trees) === null || _data$all_trees === void 0 ? void 0 : _data$all_trees.length) > 0) {\n        const activeThread = data.all_trees.find(t => t.has_running_tasks);\n        if (activeThread) {\n          setSelectedThread(activeThread.tree_id);\n        }\n      }\n    } catch (error) {\n      console.error('Error fetching threads:', error);\n    }\n  };\n  const loadThreadMessages = async threadId => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/tasks/tree/${threadId}/messages`);\n      const data = await response.json();\n\n      // Add historical messages to the state\n      setMessages(prev => {\n        // Remove existing messages for this thread to avoid duplicates\n        const filtered = prev.filter(m => m.tree_id !== threadId);\n        return [...filtered, ...data.messages];\n      });\n    } catch (error) {\n      console.error('Error loading thread messages:', error);\n    }\n  };\n  const fetchSystemConfig = async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/system/config`);\n      const config = await response.json();\n      setSystemConfig(config);\n    } catch (error) {\n      console.error('Error fetching config:', error);\n    }\n  };\n  const updateSystemConfig = async newConfig => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/system/config`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newConfig)\n      });\n      if (response.ok) {\n        const result = await response.json();\n        setSystemConfig(result.config);\n      }\n    } catch (error) {\n      console.error('Error updating config:', error);\n    }\n  };\n  const submitTask = async e => {\n    e.preventDefault();\n    if (!instruction.trim() || isSubmitting) return;\n    setIsSubmitting(true);\n    try {\n      const response = await fetch(`${API_BASE_URL}/tasks`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          instruction\n        })\n      });\n      if (response.ok) {\n        const result = await response.json();\n        setInstruction('');\n        // Auto-select the new thread\n        setSelectedThread(result.tree_id);\n        fetchThreads();\n      }\n    } catch (error) {\n      console.error('Error submitting task:', error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n  const continueTask = async taskId => {\n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify({\n        type: 'continue_step',\n        task_id: taskId\n      }));\n    }\n  };\n  const handleKeyDown = e => {\n    if (e.key === 'Enter' && e.ctrlKey) {\n      submitTask(e);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\uD83E\\uDD16 Self-Improving Agent System\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"nav\", {\n        className: \"app-nav\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `nav-button ${currentView === 'tasks' ? 'active' : ''}`,\n          onClick: () => setCurrentView('tasks'),\n          children: \"Tasks\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `nav-button ${currentView === 'agents' ? 'active' : ''}`,\n          onClick: () => setCurrentView('agents'),\n          children: \"Agents\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `nav-button ${currentView === 'tools' ? 'active' : ''}`,\n          onClick: () => setCurrentView('tools'),\n          children: \"Tools\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `nav-button ${currentView === 'documents' ? 'active' : ''}`,\n          onClick: () => setCurrentView('documents'),\n          children: \"Documents\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"connection-status\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: `status-indicator ${connectionStatus}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this), connectionStatus]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sidebar\",\n        children: /*#__PURE__*/_jsxDEV(ThreadList, {\n          threads: threads,\n          selectedThread: selectedThread,\n          onSelectThread: (threadId, showComp) => {\n            setSelectedThread(threadId);\n            setShowCompleted(showComp);\n            if (threadId) {\n              loadThreadMessages(threadId);\n            }\n          },\n          showCompleted: showCompleted\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task-input-section\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: submitTask,\n            className: \"task-form\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: instruction,\n              onChange: e => setInstruction(e.target.value),\n              onKeyDown: handleKeyDown,\n              placeholder: \"Enter a task instruction...\",\n              className: \"task-input\",\n              disabled: isSubmitting\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              disabled: !instruction.trim() || isSubmitting,\n              className: \"submit-button\",\n              children: isSubmitting ? 'Submitting...' : 'Submit Task'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 11\n        }, this), selectedThread ? /*#__PURE__*/_jsxDEV(MessageStream, {\n          messages: messages,\n          threadId: selectedThread\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-thread-selected\",\n          children: \"Select a thread or submit a new task to get started\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control-sidebar\",\n        children: /*#__PURE__*/_jsxDEV(ControlPanel, {\n          systemConfig: systemConfig,\n          onUpdateConfig: updateSystemConfig,\n          selectedThread: selectedThread,\n          pausedTasks: pausedTasks.filter(t => t.tree_id === selectedThread),\n          onContinueTask: continueTask\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Su0TV8PkvAsmoNMKDu/cGUXE9Xg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ThreadList","MessageStream","ControlPanel","AgentBrowser","ToolBrowser","DocumentBrowser","jsxDEV","_jsxDEV","API_BASE_URL","process","env","REACT_APP_API_URL","window","location","hostname","protocol","WS_URL","REACT_APP_WS_URL","App","_s","currentView","setCurrentView","threads","setThreads","selectedThread","setSelectedThread","showCompleted","setShowCompleted","messages","setMessages","pausedTasks","setPausedTasks","systemConfig","setSystemConfig","max_parallel_tasks","step_mode","step_mode_threads","instruction","setInstruction","isSubmitting","setIsSubmitting","connectionStatus","setConnectionStatus","wsRef","current","readyState","WebSocket","CLOSED","connectWebSocket","fetchThreads","fetchSystemConfig","OPEN","close","CONNECTING","ws","onopen","console","log","onmessage","event","message","JSON","parse","data","handleWebSocketMessage","e","error","onclose","setTimeout","onerror","type","prev","config","filter","t","task_id","_data$all_trees","response","fetch","json","all_trees","length","activeThread","find","has_running_tasks","tree_id","loadThreadMessages","threadId","filtered","m","updateSystemConfig","newConfig","method","headers","body","stringify","ok","result","submitTask","preventDefault","trim","continueTask","taskId","send","handleKeyDown","key","ctrlKey","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onSelectThread","showComp","onSubmit","value","onChange","target","onKeyDown","placeholder","disabled","onUpdateConfig","onContinueTask","_c","$RefreshReg$"],"sources":["/home/ubuntu/system.petter.ai/agent_system/web/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport ThreadList from './components/ThreadList';\nimport MessageStream from './components/MessageStream';\nimport ControlPanel from './components/ControlPanel';\nimport AgentBrowser from './components/AgentBrowser';\nimport ToolBrowser from './components/ToolBrowser';\nimport DocumentBrowser from './components/DocumentBrowser';\n\n// Get API base URL from environment or use production default\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \n  (window.location.hostname === 'localhost' ? 'http://localhost:8000' : `${window.location.protocol}//${window.location.hostname}/api`);\nconst WS_URL = process.env.REACT_APP_WS_URL || \n  (window.location.hostname === 'localhost' ? 'ws://localhost:8000/ws' : `${window.location.protocol === 'https:' ? 'wss:' : 'ws:'}//${window.location.hostname}/api/ws`);\n\nfunction App() {\n  const [currentView, setCurrentView] = useState('tasks'); // 'tasks', 'agents', 'tools', 'documents'\n  const [threads, setThreads] = useState([]);\n  const [selectedThread, setSelectedThread] = useState(null);\n  const [showCompleted, setShowCompleted] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [pausedTasks, setPausedTasks] = useState([]);\n  const [systemConfig, setSystemConfig] = useState({\n    max_parallel_tasks: 3,\n    step_mode: false,\n    step_mode_threads: []\n  });\n  const [instruction, setInstruction] = useState('');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [connectionStatus, setConnectionStatus] = useState('connecting');\n  const wsRef = useRef(null);\n\n  useEffect(() => {\n    // Connect to WebSocket for real-time updates\n    if (!wsRef.current || wsRef.current.readyState === WebSocket.CLOSED) {\n      connectWebSocket();\n    }\n    \n    // Initial data fetch\n    fetchThreads();\n    fetchSystemConfig();\n\n    return () => {\n      if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n        wsRef.current.close();\n        wsRef.current = null;\n      }\n    };\n  }, []);\n\n  const connectWebSocket = () => {\n    // Prevent multiple connections\n    if (wsRef.current && (wsRef.current.readyState === WebSocket.CONNECTING || \n        wsRef.current.readyState === WebSocket.OPEN)) {\n      return;\n    }\n    \n    const ws = new WebSocket(WS_URL);\n    wsRef.current = ws;\n    \n    ws.onopen = () => {\n      console.log('WebSocket connected');\n      setConnectionStatus('connected');\n    };\n    \n    ws.onmessage = (event) => {\n      try {\n        const message = JSON.parse(event.data);\n        handleWebSocketMessage(message);\n      } catch (e) {\n        console.error('Error parsing WebSocket message:', e);\n      }\n    };\n    \n    ws.onclose = () => {\n      console.log('WebSocket disconnected, reconnecting...');\n      setConnectionStatus('disconnected');\n      wsRef.current = null;\n      setTimeout(connectWebSocket, 3000);\n    };\n    \n    ws.onerror = (error) => {\n      console.error('WebSocket error:', error);\n      setConnectionStatus('error');\n    };\n  };\n\n  const handleWebSocketMessage = (message) => {\n    switch (message.type) {\n      case 'agent_started':\n      case 'agent_thinking':\n      case 'agent_tool_call':\n      case 'agent_tool_result':\n      case 'agent_completed':\n      case 'agent_error':\n      case 'step_mode_pause':\n        setMessages(prev => [...prev, message]);\n        \n        if (message.type === 'step_mode_pause') {\n          setPausedTasks(prev => [...prev, message]);\n        }\n        break;\n        \n      case 'task_created':\n      case 'task_completed':\n      case 'thread_update':\n        fetchThreads();\n        break;\n        \n      case 'config_updated':\n        setSystemConfig(message.config);\n        break;\n        \n      case 'step_continued':\n        setPausedTasks(prev => prev.filter(t => t.task_id !== message.task_id));\n        break;\n    }\n  };\n\n  const fetchThreads = async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/tasks/all`);\n      const data = await response.json();\n      setThreads(data.all_trees || []);\n      \n      // Auto-select first active thread if none selected\n      if (!selectedThread && data.all_trees?.length > 0) {\n        const activeThread = data.all_trees.find(t => t.has_running_tasks);\n        if (activeThread) {\n          setSelectedThread(activeThread.tree_id);\n        }\n      }\n    } catch (error) {\n      console.error('Error fetching threads:', error);\n    }\n  };\n  \n  const loadThreadMessages = async (threadId) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/tasks/tree/${threadId}/messages`);\n      const data = await response.json();\n      \n      // Add historical messages to the state\n      setMessages(prev => {\n        // Remove existing messages for this thread to avoid duplicates\n        const filtered = prev.filter(m => m.tree_id !== threadId);\n        return [...filtered, ...data.messages];\n      });\n    } catch (error) {\n      console.error('Error loading thread messages:', error);\n    }\n  };\n\n  const fetchSystemConfig = async () => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/system/config`);\n      const config = await response.json();\n      setSystemConfig(config);\n    } catch (error) {\n      console.error('Error fetching config:', error);\n    }\n  };\n\n  const updateSystemConfig = async (newConfig) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/system/config`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(newConfig)\n      });\n      \n      if (response.ok) {\n        const result = await response.json();\n        setSystemConfig(result.config);\n      }\n    } catch (error) {\n      console.error('Error updating config:', error);\n    }\n  };\n\n  const submitTask = async (e) => {\n    e.preventDefault();\n    if (!instruction.trim() || isSubmitting) return;\n\n    setIsSubmitting(true);\n    try {\n      const response = await fetch(`${API_BASE_URL}/tasks`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ instruction })\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        setInstruction('');\n        // Auto-select the new thread\n        setSelectedThread(result.tree_id);\n        fetchThreads();\n      }\n    } catch (error) {\n      console.error('Error submitting task:', error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const continueTask = async (taskId) => {\n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify({\n        type: 'continue_step',\n        task_id: taskId\n      }));\n    }\n  };\n\n  const handleKeyDown = (e) => {\n    if (e.key === 'Enter' && e.ctrlKey) {\n      submitTask(e);\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app-header\">\n        <h1>🤖 Self-Improving Agent System</h1>\n        <nav className=\"app-nav\">\n          <button \n            className={`nav-button ${currentView === 'tasks' ? 'active' : ''}`}\n            onClick={() => setCurrentView('tasks')}\n          >\n            Tasks\n          </button>\n          <button \n            className={`nav-button ${currentView === 'agents' ? 'active' : ''}`}\n            onClick={() => setCurrentView('agents')}\n          >\n            Agents\n          </button>\n          <button \n            className={`nav-button ${currentView === 'tools' ? 'active' : ''}`}\n            onClick={() => setCurrentView('tools')}\n          >\n            Tools\n          </button>\n          <button \n            className={`nav-button ${currentView === 'documents' ? 'active' : ''}`}\n            onClick={() => setCurrentView('documents')}\n          >\n            Documents\n          </button>\n        </nav>\n        <div className=\"connection-status\">\n          <span className={`status-indicator ${connectionStatus}`}></span>\n          {connectionStatus}\n        </div>\n      </div>\n      \n      <div className=\"app-body\">\n        <div className=\"sidebar\">\n          <ThreadList\n            threads={threads}\n            selectedThread={selectedThread}\n            onSelectThread={(threadId, showComp) => {\n              setSelectedThread(threadId);\n              setShowCompleted(showComp);\n              if (threadId) {\n                loadThreadMessages(threadId);\n              }\n            }}\n            showCompleted={showCompleted}\n          />\n        </div>\n        \n        <div className=\"main-content\">\n          <div className=\"task-input-section\">\n            <form onSubmit={submitTask} className=\"task-form\">\n              <input\n                type=\"text\"\n                value={instruction}\n                onChange={(e) => setInstruction(e.target.value)}\n                onKeyDown={handleKeyDown}\n                placeholder=\"Enter a task instruction...\"\n                className=\"task-input\"\n                disabled={isSubmitting}\n              />\n              <button \n                type=\"submit\" \n                disabled={!instruction.trim() || isSubmitting}\n                className=\"submit-button\"\n              >\n                {isSubmitting ? 'Submitting...' : 'Submit Task'}\n              </button>\n            </form>\n          </div>\n          \n          {selectedThread ? (\n            <MessageStream\n              messages={messages}\n              threadId={selectedThread}\n            />\n          ) : (\n            <div className=\"no-thread-selected\">\n              Select a thread or submit a new task to get started\n            </div>\n          )}\n        </div>\n        \n        <div className=\"control-sidebar\">\n          <ControlPanel\n            systemConfig={systemConfig}\n            onUpdateConfig={updateSystemConfig}\n            selectedThread={selectedThread}\n            pausedTasks={pausedTasks.filter(t => t.tree_id === selectedThread)}\n            onContinueTask={continueTask}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}