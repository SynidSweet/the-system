{"ast":null,"code":"import _objectSpread from \"/code/personal/the-system/agent_system/web/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { hierarchy, tree } from 'd3-hierarchy';\nfunction getTreeData(props) {\n  const margins = props.margins || {\n    bottom: 10,\n    left: props.direction !== 'rtl' ? 20 : 150,\n    right: props.direction !== 'rtl' ? 150 : 20,\n    top: 10\n  };\n  const contentWidth = props.width - margins.left - margins.right;\n  const contentHeight = props.height - margins.top - margins.bottom;\n  const data = hierarchy(props.data, props.getChildren);\n  const root = tree().size([contentHeight, contentWidth])(data);\n\n  // d3 gives us a top to down tree, but we will display it left to right/right to left, so x and y need to be swapped\n  const links = root.links().map(link => _objectSpread(_objectSpread({}, link), {}, {\n    source: _objectSpread(_objectSpread({}, link.source), {}, {\n      x: props.direction !== 'rtl' ? link.source.y : contentWidth - link.source.y,\n      y: link.source.x\n    }),\n    target: _objectSpread(_objectSpread({}, link.target), {}, {\n      x: props.direction !== 'rtl' ? link.target.y : contentWidth - link.target.y,\n      y: link.target.x\n    })\n  }));\n  const nodes = root.descendants().map(node => _objectSpread(_objectSpread({}, node), {}, {\n    x: props.direction !== 'rtl' ? node.y : contentWidth - node.y,\n    y: node.x\n  }));\n  return {\n    links,\n    margins,\n    nodes\n  };\n}\nexport { getTreeData as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}